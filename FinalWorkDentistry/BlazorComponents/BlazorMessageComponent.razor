@page "/"

@using Microsoft.AspNetCore.SignalR
@using FinalWorkDentistry.Models;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable





@if (DisplayChat)
{
    <div class="main d-flex"  id="chat-container">
        <div class="wrapper shadow-sm rounded" style="width:350px">
            <!-- Шапка чата -->
            <div class="chat-header">
                <button class="chat_btn" type="button" 
                        @onclick="() => { CloseChat(); ClearChat(); }">
                    &times;
                </button>
                <h5>Чат с менеджером</h5>
                <p>Онлайн</p>
            </div>

            <!-- Место для сообщений -->
            <div class="chat-messages">
                @foreach (var userMessage in userMessages)
                {
                    <div class="row @(userMessage.CurrentUser ? "justify-content-end" : "")">
                        <div class="col">
                            <div class="shadow p-3 mb-3 bg-light rounded @(userMessage.CurrentUser ? "text-end" : "")" style="display: inline-block; max-width: 90%; word-wrap: break-word; color: black; margin: 10px 5px 0 0 ">
                                <p class="card-text" style="margin: 10px 0; font-size: 16px; text-align: left;">@userMessage.Message</p>
                                <span class="small text-muted" style="display: block;">@userMessage.DateSent.ToString("HH:mm |  dd MMM")</span>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Поле для ввода сообщения -->
        <div class="chat-message-input">
            <input @bind="messageInput" type="text" placeholder="Введите текст" style="width: calc(100% - 40px); border: none; outline: none; background-color: rgba(255, 255, 255, 0.8); padding: 10px;">
            <button class="message-input_btn" type="button" @onclick="Send">
                &#10149;
            </button>
        </div>
    </div>
}

<button class="chat-button" type="button" @onclick="OpenChat">
    <span class="material-symbols-outlined">
        forum
    </span>
</button>







@code {

    public bool DisplayChat { get; set; } = false;

    private void ClearChat()
    {
        userMessages.Clear();
        messageInput = string.Empty;
    }

    public void OpenChat()
    {
        DisplayChat = true;
        StateHasChanged();
    }

    public void CloseChat()
    {
        DisplayChat = false;
        StateHasChanged();
    }

    [Parameter]
    public AppleMainComponent ParentComponent { get; set; }
    private HubConnection hubConnection;
    private List<UserMessage> userMessages = new();
    private string usernameInput;
    private string messageInput;
    private bool isUserReadonly = false;

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", async (user, message) =>
     {
     await InvokeAsync(() =>
     {
         userMessages.Add(new UserMessage { Username = user, Message = message, CurrentUser = user == usernameInput, DateSent = DateTime.Now });
         StateHasChanged();
     });
     });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if ( /* !string.IsNullOrEmpty(usernameInput) &&  */ !string.IsNullOrEmpty(messageInput))
        {
            await hubConnection.SendAsync("SendMessage", usernameInput, messageInput);

            isUserReadonly = true;
            messageInput = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

  



}


